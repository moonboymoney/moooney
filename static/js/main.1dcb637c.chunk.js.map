{"version":3,"sources":["App.js","index.js"],"names":["ValidAccountRe","App","props","state","connected","signedIn","accountId","newAccountId","creating","accountLoading","newAccountExists","computingProofOfWork","initNear","then","setState","_authData","this","_keyStore","getKey","_nearConfig","networkId","keyPair","nearlib","fromString","setKey","account","_near","connection","_faucetContract","viewMethods","changeMethods","sender","get_account_suffix","_accountSuffix","get_min_difficulty","_minDifficulty","get_num_created_accounts","numCreatedAccounts","nearConfig","nodeUrl","contractName","walletUrl","keyStore","BrowserLocalStorageKeyStore","Object","assign","deps","near","JSON","parse","window","localStorage","getItem","initFaucet","key","value","stateChange","toLowerCase","replace","isValidAccount","provider","query","_a","catch","e","includes","length","match","publicKey","msg","TextEncoder","encode","push","data","charCodeAt","Uint8Array","len","bestDifficulty","salt","crypto","subtle","digest","hashBuffer","totalNumZeros","i","numZeros","Math","clz32","proofOfWorkProgress","trunc","proofOfWorkDifficulty","proofOfWorkSalt","seed","generateSeedPhrase","newKeyPair","secretKey","computeProofOfWork","getPublicKey","create_account","account_id","public_key","setItem","stringify","location","seedPhrase","removeItem","content","className","onClick","moveAccountToWallet","logout","htmlFor","placeholder","id","newAccountClass","onChange","handleChange","target","disabled","role","createAccount","aria-hidden","style","width","aria-valuenow","aria-valuemin","aria-valuemax","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1dcb637c.chunk.js","sourcesContent":["import React from 'react';\nimport * as nearlib from 'nearlib';\nimport { generateSeedPhrase } from 'near-seed-phrase';\n\nconst FaucetPrivateKey = 'ed25519:2Rtn6ms22rCRMgmGgLRSPPd6gYDCgWDuFrX6gERknSA8GKiCHE5L9Rksc1ihsSCDvMSptfbipzq29H7cDZhR1Ze3';\nconst FaucetName = 'meta';\nconst MinAccountIdLen = 2;\nconst MaxAccountIdLen = 64;\nconst ValidAccountRe = /^(([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+$/;\nconst AuthDataKey = \"meta-faucet-auth-data\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      connected: false,\n      signedIn: false,\n      accountId: null,\n      newAccountId: \"\",\n      creating: false,\n      accountLoading: false,\n      newAccountExists: false,\n      computingProofOfWork: false,\n    };\n\n    this.initNear().then(() => {\n      this.setState({\n        connected: true,\n        signedIn: !!this._authData.accountId,\n        accountId: this._authData.accountId,\n      })\n    })\n  }\n\n  async initFaucet() {\n    let key = await this._keyStore.getKey(this._nearConfig.networkId, FaucetName);\n    if (!key) {\n      const keyPair = nearlib.KeyPair.fromString(FaucetPrivateKey);\n      await this._keyStore.setKey(this._nearConfig.networkId, FaucetName, keyPair);\n    }\n    const account = new nearlib.Account(this._near.connection, FaucetName);\n    this._faucetContract =  new nearlib.Contract(account, FaucetName, {\n      viewMethods: ['get_min_difficulty', 'get_account_suffix', 'get_num_created_accounts'],\n      changeMethods: ['create_account'],\n      sender: FaucetName\n    });\n    this._accountSuffix = await this._faucetContract.get_account_suffix();\n    this._minDifficulty = await this._faucetContract.get_min_difficulty();\n    this.setState({\n      numCreatedAccounts: await this._faucetContract.get_num_created_accounts(),\n    });\n    // console.log(JSON.stringify([...key.getPublicKey().data]));\n  }\n\n  async initNear() {\n    const nearConfig = {\n      networkId: 'default',\n      nodeUrl: 'https://rpc.nearprotocol.com',\n      contractName: FaucetName,\n      walletUrl: 'https://wallet.nearprotocol.com',\n    };\n    const keyStore = new nearlib.keyStores.BrowserLocalStorageKeyStore();\n    const near = await nearlib.connect(Object.assign({ deps: { keyStore } }, nearConfig));\n    this._keyStore = keyStore;\n    this._nearConfig = nearConfig;\n    this._near = near;\n\n    this._authData = JSON.parse(window.localStorage.getItem(AuthDataKey) || '{}');\n    await this.initFaucet();\n  }\n\n  handleChange(key, value) {\n    const stateChange = {\n      [key]: value,\n    };\n    if (key === 'newAccountId') {\n      value = value.toLowerCase().replace(/[^a-z0-9\\-_.]/, '');\n      stateChange[key] = value;\n      stateChange.newAccountExists = false;\n      if (this.isValidAccount(value)) {\n        stateChange.accountLoading = true;\n        this._near.connection.provider.query(`account/${value + this._accountSuffix}`, '').then((_a) => {\n          if (this.state.newAccountId === value) {\n            this.setState({\n              accountLoading: false,\n              newAccountExists: true,\n            })\n          }\n        }).catch((e) => {\n          if (this.state.newAccountId === value) {\n            this.setState({\n              accountLoading: false,\n              newAccountExists: false,\n            })\n          }\n        })\n      }\n    }\n    this.setState(stateChange);\n  }\n\n  isValidAccount(newAccountId) {\n    if (newAccountId.includes('.')) {\n      return false;\n    }\n    const accountId = newAccountId + this._accountSuffix;\n    return accountId.length >= MinAccountIdLen &&\n        accountId.length <= MaxAccountIdLen &&\n        accountId.match(ValidAccountRe);\n  }\n\n  newAccountClass() {\n    if (!this.state.newAccountId || this.state.accountLoading) {\n      return \"form-control form-control-large\";\n    } else if (!this.state.newAccountExists && this.isValidAccount(this.state.newAccountId)) {\n      return \"form-control form-control-large is-valid\";\n    } else {\n      return \"form-control form-control-large is-invalid\";\n    }\n  }\n\n  async computeProofOfWork(accountId, publicKey) {\n    let msg = [...new TextEncoder('utf-8').encode(accountId + ':')];\n    // curve\n    msg.push(0);\n    // key\n    msg.push(...publicKey.data);\n    // separator\n    msg.push(':'.charCodeAt(0));\n    // salt\n    msg.push(0, 0, 0, 0, 0, 0, 0, 0);\n    msg = new Uint8Array(msg);\n    const len = msg.length;\n    let bestDifficulty = 0;\n    for (let salt = 0; ; ++salt) {\n      // compute hash\n      const hashBuffer = new Uint8Array(await crypto.subtle.digest('SHA-256', msg));\n      // compute number of leading zero bits\n      let totalNumZeros = 0;\n      for (let i = 0; i < hashBuffer.length; ++i) {\n        let numZeros = Math.clz32(hashBuffer[i]) - 24;\n        totalNumZeros += numZeros;\n        if (numZeros < 8) {\n          break;\n        }\n      }\n      // checking difficulty\n      if (totalNumZeros >= this._minDifficulty) {\n        this.setState({\n          computingProofOfWork: false,\n        });\n        return salt;\n      } else if (totalNumZeros > bestDifficulty) {\n        bestDifficulty = totalNumZeros;\n        this.setState({\n          proofOfWorkProgress: Math.trunc(bestDifficulty * 100 / this._minDifficulty),\n          proofOfWorkDifficulty: bestDifficulty,\n          proofOfWorkSalt: salt,\n        });\n      } else if (salt % 10000 === 0) {\n        this.setState({\n          proofOfWorkSalt: salt\n        });\n      }\n      // incrementing salt\n      for (let i = len - 8; i < len; ++i) {\n        if (msg[i] === 255) {\n          msg[i] = 0;\n        } else {\n          ++msg[i];\n          break;\n        }\n      }\n    }\n  }\n\n  async createAccount() {\n    this.setState({\n      creating: true,\n      computingProofOfWork: true,\n      proofOfWorkProgress: 0,\n      proofOfWorkDifficulty: 0,\n      proofOfWorkSalt: 0,\n    })\n    const newAccountId = this.state.newAccountId + this._accountSuffix;\n    const seed = generateSeedPhrase();\n    const newKeyPair = nearlib.KeyPair.fromString(seed.secretKey);\n    const salt = await this.computeProofOfWork(newAccountId, newKeyPair.getPublicKey());\n    await this._faucetContract.create_account({\n      account_id: newAccountId,\n      public_key: [0, ...newKeyPair.getPublicKey().data],\n      salt,\n    });\n    await this._keyStore.setKey(this._nearConfig.networkId, newAccountId, newKeyPair);\n    this._authData = {\n      accountId: newAccountId,\n      seed,\n    };\n    window.localStorage.setItem(AuthDataKey, JSON.stringify(this._authData));\n    this.setState({\n      signedIn: true,\n      accountId: newAccountId,\n      creating: false,\n      numCreatedAccounts: await this._faucetContract.get_num_created_accounts(),\n    })\n  }\n\n  moveAccountToWallet() {\n    window.location = `https://wallet.nearprotocol.com/recover-with-link/${this._authData.accountId}/${this._authData.seed.seedPhrase}`;\n  }\n\n  logout() {\n    window.localStorage.removeItem(AuthDataKey);\n    this._authData = {};\n    this.setState({\n      signedIn: false,\n      accountId: null,\n      newAccountId: \"\",\n      creating: false,\n      accountLoading: false,\n      newAccountExists: false,\n      computingProofOfWork: false,\n    });\n  }\n\n  render() {\n    const content = !this.state.connected ? (\n      <div>Connecting... <span className=\"spinner-grow spinner-grow-sm\" role=\"status\" aria-hidden=\"true\"></span></div>\n    ) : (this.state.signedIn ? (\n      <div>\n        <h3>Hello, {this.state.accountId}</h3>\n        <div className=\"form-group\">\n          <button\n            className=\"btn btn-success\"\n            onClick={() => this.moveAccountToWallet()}\n          >\n            Move account to NEAR Wallet\n          </button>\n        </div>\n        <div className=\"form-group\">\n          <button\n            className=\"btn btn-danger\"\n            onClick={() => this.logout()}\n          >\n            Logout from Faucet\n          </button>\n        </div>\n      </div>\n    ) : (\n      <div>\n        <div className=\"form-group\">\n          <label htmlFor=\"accountId\">Create a new account</label>\n          <div className=\"input-group\">\n            <div className=\"input-group-prepend\">\n              <div className=\"input-group-text\">{\"@\"}</div>\n            </div>\n            <input\n              placeholder=\"bob\"\n              id=\"accountId\"\n              className={this.newAccountClass()}\n              value={this.state.newAccountId}\n              onChange={(e) => this.handleChange('newAccountId', e.target.value)}\n              disabled={this.state.creating}\n            />\n            <div className=\"input-group-append\">\n              <div className=\"input-group-text\">{this._accountSuffix}</div>\n            </div>\n          </div>\n        </div>\n        {this.state.newAccountExists && (\n          <div className=\"alert alert-warning\" role=\"alert\">\n            Account {'\"' + this.state.newAccountId + this._accountSuffix + '\"'} already exists!\n          </div>\n        )}\n        <div className=\"form-group\">\n          <button\n            className=\"btn btn-primary\"\n            disabled={this.state.creating || this.state.accountLoading || this.state.newAccountExists || !this.isValidAccount(this.state.newAccountId)}\n            onClick={() => this.createAccount()}\n          >\n            {(this.state.creating || this.state.accountLoading) && (\n              <span className=\"spinner-grow spinner-grow-sm\" role=\"status\" aria-hidden=\"true\"></span>\n            )} Create Account {this.isValidAccount(this.state.newAccountId) ? ('\"' + this.state.newAccountId + this._accountSuffix + '\"') : \"\"}\n          </button>\n        </div>\n        {this.state.creating && (\n          <div>\n            {this.state.computingProofOfWork ? (\n              <div>\n                Computing Proof of Work. Done {this.state.proofOfWorkSalt} operations.\n                <div className=\"progress\">\n                  <div className=\"progress-bar\" role=\"progressbar\" style={{width: this.state.proofOfWorkProgress + '%'}} aria-valuenow={this.state.proofOfWorkProgress} aria-valuemin=\"0\"\n                       aria-valuemax=\"100\">{this.state.proofOfWorkDifficulty} out of {this._minDifficulty}\n                  </div>\n                </div>\n              </div>\n            ) : (\n              <div>\n                Proof of Work is Done! Creating account {'\"' + this.state.newAccountId + this._accountSuffix + '\"'}\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    ));\n    return (\n      <div>\n        <div>\n          <h1>NEAR Proof of Work Faucet</h1>\n          There were <span className=\"font-weight-bold\">{this.state.numCreatedAccounts} accounts</span> created using this faucet.\n        </div>\n        <hr/>\n        {content}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}